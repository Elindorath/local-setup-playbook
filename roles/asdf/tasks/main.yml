---
- name: Install asdf plugins
  ansible.builtin.command: "asdf plugin add {{ item.name }} {{ item.repository }}"
  with_items: "{{ asdf_plugins_to_install }}"
  register: result_plugin
  failed_when:
    - result_plugin.rc != 0
    - '"already added" not in result_plugin.stderr'

- name: Install asdf plugin tool versions
  ansible.builtin.shell: "{{ item.0.env is defined | ternary(item.0.env | default('') + ' ', '') }}asdf install {{ item.0.name }} {{ item.1 }}"
  with_subelements:
    - "{{ asdf_plugins_to_install }}"
    - versions

- name: Set asdf plugin tool global versions
  ansible.builtin.command: "asdf global {{ item.name }} {{ item.global }}"
  loop: "{{ asdf_plugins_to_install }}"

- name: Get direnv line from ~/.tool-versions
  ansible.builtin.set_fact:
    tool_version_path: "{{ (ansible_env.HOME, '.tool-versions') | path_join }}"
    direnv_line: "{{ lookup('file', (ansible_env.HOME, '.tool-versions') | path_join) | regex_search('direnv .+') }}"

- name: Remove direnv line from ~/.tool-versions
  ansible.builtin.lineinfile:
    path: "{{ tool_version_path }}"
    line: "{{ direnv_line }}"
    state: absent

- name: Append direnv line at the beginning of ~/.tool-versions
  ansible.builtin.lineinfile:
    path: "{{ tool_version_path }}"
    line: "{{ direnv_line }}"
    state: present
    insertbefore: BOF
  when: direnv_line | length > 0

- name: Execute after install hooks
  ansible.builtin.command: "{{ item.after_install }}"
  loop: "{{ asdf_plugins_to_install }}"
  when: item.after_install is defined
